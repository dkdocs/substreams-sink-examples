# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sf.firehose.v2 import firehose_pb2 as sf_dot_firehose_dot_v2_dot_firehose__pb2
from sf.substreams.rpc.v2 import service_pb2 as sf_dot_substreams_dot_rpc_dot_v2_dot_service__pb2


class StreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Blocks = channel.unary_stream(
                '/sf.substreams.rpc.v2.Stream/Blocks',
                request_serializer=sf_dot_substreams_dot_rpc_dot_v2_dot_service__pb2.Request.SerializeToString,
                response_deserializer=sf_dot_substreams_dot_rpc_dot_v2_dot_service__pb2.Response.FromString,
                _registered_method=True)


class StreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Blocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Blocks': grpc.unary_stream_rpc_method_handler(
                    servicer.Blocks,
                    request_deserializer=sf_dot_substreams_dot_rpc_dot_v2_dot_service__pb2.Request.FromString,
                    response_serializer=sf_dot_substreams_dot_rpc_dot_v2_dot_service__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sf.substreams.rpc.v2.Stream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sf.substreams.rpc.v2.Stream', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Stream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Blocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/sf.substreams.rpc.v2.Stream/Blocks',
            sf_dot_substreams_dot_rpc_dot_v2_dot_service__pb2.Request.SerializeToString,
            sf_dot_substreams_dot_rpc_dot_v2_dot_service__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class EndpointInfoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Info = channel.unary_unary(
                '/sf.substreams.rpc.v2.EndpointInfo/Info',
                request_serializer=sf_dot_firehose_dot_v2_dot_firehose__pb2.InfoRequest.SerializeToString,
                response_deserializer=sf_dot_firehose_dot_v2_dot_firehose__pb2.InfoResponse.FromString,
                _registered_method=True)


class EndpointInfoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EndpointInfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=sf_dot_firehose_dot_v2_dot_firehose__pb2.InfoRequest.FromString,
                    response_serializer=sf_dot_firehose_dot_v2_dot_firehose__pb2.InfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sf.substreams.rpc.v2.EndpointInfo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sf.substreams.rpc.v2.EndpointInfo', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EndpointInfo(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sf.substreams.rpc.v2.EndpointInfo/Info',
            sf_dot_firehose_dot_v2_dot_firehose__pb2.InfoRequest.SerializeToString,
            sf_dot_firehose_dot_v2_dot_firehose__pb2.InfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
